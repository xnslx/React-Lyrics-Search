{"version":3,"sources":["SearchInput/SearchInput.module.css","LyricList/LyricList.module.css","LyricDetail/LyricDetail.module.css","Context/Context.js","LyricDetail/LyricDetail.js","Nav/Nav.js","SearchInput/SearchInput.js","LyricList/LyricList.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LyricContext","React","createContext","LyricContextProvider","props","useState","trackList","setTrackList","loading","setLoading","useEffect","axios","get","then","res","data","message","body","track_list","catch","error","Provider","value","children","LyricDetail","trackId","match","params","id","lyricDetail","setLyricDetail","lyrics","console","log","to","icon","className","classes","Icon","Container","lyrics_body","Nav","style","textAlign","SearchInput","query","setQuery","inputRef","useRef","setError","useContext","Form","onSubmit","e","preventDefault","Input","ref","type","placeholder","onChange","target","Button","withRouter","map","lyric","key","track","track_id","Item","fontSize","fontWeight","track_name","album_name","artist_name","paddingLeft","path","url","component","Main","library","add","faArrowRight","faArrowLeft","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7358bf9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"SearchInput_Form__7Gf6u\",\"Input\":\"SearchInput_Input__AeIFx\",\"Button\":\"SearchInput_Button__23tJZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LyricList_Container__2ECDF\",\"Item\":\"LyricList_Item__1seob\",\"Button\":\"LyricList_Button__24ae7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LyricDetail_Container__1pwUF\",\"Icon\":\"LyricDetail_Icon__2SEvT\"};","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport const LyricContext = React.createContext();\n\nexport const LyricContextProvider = (props) => {\n    const [trackList, setTrackList] = useState([]);\n    const [loading, setLoading] = useState(false);\n    \n    useEffect(() => {\n        axios\n          .get(\n            \"https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/chart.tracks.get?apikey=e8e53f30df9f3fa244c091846fdc0fd5&chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1\"\n          )\n          .then(res => {\n            setTrackList(res.data.message.body.track_list);\n            setLoading(false);\n            // console.log(\"res\", res);\n          })\n          .catch(error => {\n            // console.log(error);\n            setLoading(false);\n          });\n      }, []);\n    \n      return (\n        <LyricContext.Provider value={{ trackList, loading, setTrackList }}>\n          {props.children}\n        </LyricContext.Provider>\n      );\n    };\n","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\nimport classes from './LyricDetail.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst LyricDetail = (props) => {\n    // console.log(props)\n\n    const trackId = props.match.params.id;\n    const [lyricDetail, setLyricDetail] = useState({});\n\n\n    useEffect(() => {\n        axios.get(`https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=${trackId}&apikey=2fb0796550ae4d881460ef2cbd2f61bc`)\n            .then(res => {\n                setLyricDetail(res.data.message.body.lyrics)\n            })\n            .catch(error => console.log(error))\n    }, [trackId])\n    \n    \n    // console.log(lyricDetail)\n\n    return (\n        <>\n            <Link to='/lyrics'><FontAwesomeIcon icon='arrow-left' className={classes.Icon}/></Link>\n            <div className={classes.Container}>\n                <p>{lyricDetail.lyrics_body}</p>\n            </div>\n        </>\n    )\n};\n\nexport default LyricDetail;\n","import React from 'react'\n\nconst Nav = () => {\n    return (\n        <header style={{textAlign:'center'}}>\n            <h3>Lyric Finder</h3>\n        </header>\n    )\n};\n\nexport default Nav;\n","import React, {useState, useRef, useContext} from 'react';\nimport classes from './SearchInput.module.css';\nimport {LyricContext} from '../Context/Context';\nimport axios from 'axios';\n\nconst SearchInput = (props) => {\n    // console.log(props)\n    const [query, setQuery] = useState({});\n    const inputRef = useRef();\n    const [setError] = useState(false);\n    const { setTrackList } = useContext(LyricContext);\n\n    const fetchLyrics = e => {\n      e.preventDefault();\n      axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://api.musixmatch.com/ws/1.1/track.search?q_track=${query}&page_size=10&page=1&s_track_rating=desc&apikey=2fb0796550ae4d881460ef2cbd2f61bc`\n        )\n        .then(res => {\n          console.log(res);\n          setTrackList(res.data.message.body.track_list);\n        })\n        .catch(error => {\n          console.log(error);\n          setError(true);\n        });\n    };\n    return (\n      <>\n        <form className={classes.Form} onSubmit={fetchLyrics}>\n          <input\n            className={classes.Input}\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"song title...\"\n            onChange={e => setQuery(e.target.value)}\n          />\n          <button className={classes.Button}>Get Track Lyrics</button>\n        </form>\n      </>\n    );\n  };\n  \n  export default SearchInput;","import React, {useContext} from 'react';\nimport {LyricContext} from '../Context/Context';\nimport classes from './LyricList.module.css';\nimport {Link, Route, withRouter} from 'react-router-dom';\nimport LyricDetail from '../LyricDetail/LyricDetail';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst LyricList = (props) => {\n    // console.log(props)\n    const { trackList } = useContext(LyricContext)\n    // console.log(trackList)\n\n    return (\n        <>\n            <div className={classes.Container}>\n                {trackList.map(lyric => {\n                    return (\n                        <div key={lyric.track.track_id} className={classes.Item}>\n                            <h2 style={{fontSize:'18px', fontWeight:'300'}}>Track Name: <strong>{lyric.track.track_name}</strong></h2>\n                            <h4 style={{fontSize:'18px', fontWeight:'300'}}>Album Name: <strong>{lyric.track.album_name}</strong></h4>\n                            <h5 style={{fontSize:'18px', fontWeight:'300'}}>Artist: <strong>{lyric.track.artist_name}</strong></h5>\n                            <Link to={'/lyrics/' + lyric.track.track_id}><button className={classes.Button}>View Lyrics<FontAwesomeIcon icon='arrow-right' style={{paddingLeft:'20px'}}/></button></Link>\n                        </div>\n                    )\n                })}\n            </div>\n            <Route path={props.match.url + '/lyrics/:id'} component={LyricDetail}/>\n        </>\n    )\n};\n\n\n\nexport default withRouter(LyricList);\n","import React from 'react';\nimport Nav from '../Nav/Nav';\nimport SearchInput from '../SearchInput/SearchInput';\nimport LyricList from '../LyricList/LyricList';\n\nconst Main = () => {\n    return (\n        <>\n          <Nav />\n          <SearchInput />\n          <LyricList />  \n        </>\n    )\n};\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport {LyricContextProvider} from './Context/Context';\nimport {Switch, Route} from 'react-router-dom';\nimport LyricDetail from './LyricDetail/LyricDetail';\nimport Main from './Main/Main';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faArrowRight, faArrowLeft} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faArrowRight, faArrowLeft);\n\nconst App = () => {\n  return (\n    <LyricContextProvider>\n      <Switch>\n        <Route path='/lyrics/:id' component={LyricDetail}/>\n        <Route path='/' component={Main}/>\n      </Switch>\n    </LyricContextProvider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}